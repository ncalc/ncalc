//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NCalc.g by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Globalization;
using NCalc.Domain;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class NCalcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9,
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17,
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24,
		T__24=25, T__25=26, T__26=27, T__27=28, TRUE=29, FALSE=30, AND=31, OR=32,
		NOT=33, ID=34, INTEGER=35, FLOAT=36, STRING=37, DATETIME=38, NAME=39,
		EXPONENT=40, WS=41;
	public const int
		RULE_ncalcExpression = 0, RULE_logicalExpression = 1, RULE_conditionalExpression = 2,
		RULE_booleanAndExpression = 3, RULE_bitwiseOrExpression = 4, RULE_bitwiseXOrExpression = 5,
		RULE_bitwiseAndExpression = 6, RULE_equalityExpression = 7, RULE_relationalExpression = 8,
		RULE_shiftExpression = 9, RULE_additiveExpression = 10, RULE_multiplicativeExpression = 11,
		RULE_unaryExpression = 12, RULE_exponentialExpression = 13, RULE_primaryExpression = 14,
		RULE_value = 15, RULE_identifier = 16, RULE_expressionList = 17, RULE_arguments = 18;
	public static readonly string[] ruleNames = {
		"ncalcExpression", "logicalExpression", "conditionalExpression", "booleanAndExpression",
		"bitwiseOrExpression", "bitwiseXOrExpression", "bitwiseAndExpression",
		"equalityExpression", "relationalExpression", "shiftExpression", "additiveExpression",
		"multiplicativeExpression", "unaryExpression", "exponentialExpression",
		"primaryExpression", "value", "identifier", "expressionList", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "':'", "'||'", "'&&'", "'|'", "'^'", "'&'", "'=='", "'='",
		"'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", "'+'", "'-'",
		"'*'", "'/'", "'%'", "'!'", "'~'", "'**'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, "TRUE", "FALSE", "AND", "OR", "NOT", "ID",
		"INTEGER", "FLOAT", "STRING", "DATETIME", "NAME", "EXPONENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NCalc.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NCalcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	private const char BS = '\\';
	private static NumberFormatInfo numberFormatInfo = new NumberFormatInfo();

	private string extractString(string text) {

	    StringBuilder sb = new StringBuilder(text);
	    int startIndex = 1; // Skip initial quote
	    int slashIndex = -1;

	    while ((slashIndex = sb.ToString().IndexOf(BS, startIndex)) != -1)
	    {
	        char escapeType = sb[slashIndex + 1];
	        switch (escapeType)
	        {
	            case 'u':
	              string hcode = String.Concat(sb[slashIndex+4], sb[slashIndex+5]);
	              string lcode = String.Concat(sb[slashIndex+2], sb[slashIndex+3]);
	              char unicodeChar = Encoding.Unicode.GetChars(new byte[] { System.Convert.ToByte(hcode, 16), System.Convert.ToByte(lcode, 16)} )[0];
	              sb.Remove(slashIndex, 6).Insert(slashIndex, unicodeChar);
	              break;
	            case 'n': sb.Remove(slashIndex, 2).Insert(slashIndex, '\n'); break;
	            case 'r': sb.Remove(slashIndex, 2).Insert(slashIndex, '\r'); break;
	            case 't': sb.Remove(slashIndex, 2).Insert(slashIndex, '\t'); break;
	            case '\'': sb.Remove(slashIndex, 2).Insert(slashIndex, '\''); break;
	            case '\\': sb.Remove(slashIndex, 2).Insert(slashIndex, '\\'); break;
		        default: throw new RecognitionException(null, CharStreams.fromString("Invalid escape sequence: \\" + escapeType));
	        }

	        startIndex = slashIndex + 1;

	    }

	    sb.Remove(0, 1);
	    sb.Remove(sb.Length - 1, 1);

	    return sb.ToString();
	}


		public NCalcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NCalcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class NcalcExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public LogicalExpressionContext _logicalExpression;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NCalcParser.Eof, 0); }
		public NcalcExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ncalcExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterNcalcExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitNcalcExpression(this);
		}
	}

	[RuleVersion(0)]
	public NcalcExpressionContext ncalcExpression() {
		NcalcExpressionContext _localctx = new NcalcExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_ncalcExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_localctx._logicalExpression = logicalExpression();
			State = 39;
			Match(Eof);
			 _localctx.retValue =  _localctx._logicalExpression.retValue;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public ConditionalExpressionContext left;
		public ConditionalExpressionContext middle;
		public ConditionalExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext[] conditionalExpression() {
			return GetRuleContexts<ConditionalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression(int i) {
			return GetRuleContext<ConditionalExpressionContext>(i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_localctx.left = conditionalExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 44;
				Match(T__0);
				State = 45;
				_localctx.middle = conditionalExpression();
				State = 46;
				Match(T__1);
				State = 47;
				_localctx.right = conditionalExpression();
				 _localctx.retValue =  new TernaryExpression(_localctx.left.retValue, _localctx.middle.retValue, _localctx.right.retValue);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public BooleanAndExpressionContext left;
		public ConditionalExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BooleanAndExpressionContext booleanAndExpression() {
			return GetRuleContext<BooleanAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(NCalcParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(NCalcParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext[] conditionalExpression() {
			return GetRuleContexts<ConditionalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression(int i) {
			return GetRuleContext<ConditionalExpressionContext>(i);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_conditionalExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_localctx.left = booleanAndExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 54;
					_la = TokenStream.LA(1);
					if ( !(_la==T__2 || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					 type = BinaryExpressionType.Or;
					State = 56;
					_localctx.right = conditionalExpression();
					 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
					}
					}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanAndExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public BitwiseOrExpressionContext left;
		public BitwiseOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext[] bitwiseOrExpression() {
			return GetRuleContexts<BitwiseOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression(int i) {
			return GetRuleContext<BitwiseOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(NCalcParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(NCalcParser.AND, i);
		}
		public BooleanAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterBooleanAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitBooleanAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAndExpressionContext booleanAndExpression() {
		BooleanAndExpressionContext _localctx = new BooleanAndExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_booleanAndExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_localctx.left = bitwiseOrExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3 || _la==AND) {
				{
				{
				State = 66;
				_la = TokenStream.LA(1);
				if ( !(_la==T__3 || _la==AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				 type = BinaryExpressionType.And;
				State = 68;
				_localctx.right = bitwiseOrExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public BitwiseXOrExpressionContext left;
		public BitwiseOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXOrExpressionContext bitwiseXOrExpression() {
			return GetRuleContext<BitwiseXOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext[] bitwiseOrExpression() {
			return GetRuleContexts<BitwiseOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression(int i) {
			return GetRuleContext<BitwiseOrExpressionContext>(i);
		}
		public BitwiseOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrExpressionContext bitwiseOrExpression() {
		BitwiseOrExpressionContext _localctx = new BitwiseOrExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_bitwiseOrExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_localctx.left = bitwiseXOrExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 85;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 78;
					Match(T__4);
					 type = BinaryExpressionType.BitwiseOr;
					State = 80;
					_localctx.right = bitwiseOrExpression();
					 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
					}
					}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseXOrExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public BitwiseAndExpressionContext left;
		public BitwiseAndExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext[] bitwiseAndExpression() {
			return GetRuleContexts<BitwiseAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext bitwiseAndExpression(int i) {
			return GetRuleContext<BitwiseAndExpressionContext>(i);
		}
		public BitwiseXOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterBitwiseXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitBitwiseXOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXOrExpressionContext bitwiseXOrExpression() {
		BitwiseXOrExpressionContext _localctx = new BitwiseXOrExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_bitwiseXOrExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_localctx.left = bitwiseAndExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 90;
				Match(T__5);
				 type = BinaryExpressionType.BitwiseXOr;
				State = 92;
				_localctx.right = bitwiseAndExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public EqualityExpressionContext left;
		public EqualityExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public BitwiseAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndExpressionContext bitwiseAndExpression() {
		BitwiseAndExpressionContext _localctx = new BitwiseAndExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_bitwiseAndExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_localctx.left = equalityExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 102;
				Match(T__6);
				 type = BinaryExpressionType.BitwiseAnd;
				State = 104;
				_localctx.right = equalityExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public RelationalExpressionContext left;
		public RelationalExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_equalityExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_localctx.left = relationalExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3840L) != 0)) {
				{
				{
				State = 118;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
				case T__8:
					{
					State = 114;
					_la = TokenStream.LA(1);
					if ( !(_la==T__7 || _la==T__8) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					 type = BinaryExpressionType.Equal;
					}
					break;
				case T__9:
				case T__10:
					{
					State = 116;
					_la = TokenStream.LA(1);
					if ( !(_la==T__9 || _la==T__10) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					 type = BinaryExpressionType.NotEqual;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 120;
				_localctx.right = relationalExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public ShiftExpressionContext left;
		public ShiftExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_relationalExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_localctx.left = shiftExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) {
				{
				{
				State = 138;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
					{
					State = 130;
					Match(T__11);
					 type = BinaryExpressionType.Lesser;
					}
					break;
				case T__12:
					{
					State = 132;
					Match(T__12);
					 type = BinaryExpressionType.LesserOrEqual;
					}
					break;
				case T__13:
					{
					State = 134;
					Match(T__13);
					 type = BinaryExpressionType.Greater;
					}
					break;
				case T__14:
					{
					State = 136;
					Match(T__14);
					 type = BinaryExpressionType.GreaterOrEqual;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 140;
				_localctx.right = shiftExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public AdditiveExpressionContext left;
		public AdditiveExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_shiftExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_localctx.left = additiveExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15 || _la==T__16) {
				{
				{
				State = 154;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__15:
					{
					State = 150;
					Match(T__15);
					 type = BinaryExpressionType.LeftShift;
					}
					break;
				case T__16:
					{
					State = 152;
					Match(T__16);
					 type = BinaryExpressionType.RightShift;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 156;
				_localctx.right = additiveExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public MultiplicativeExpressionContext left;
		public MultiplicativeExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_additiveExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_localctx.left = multiplicativeExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || _la==T__18) {
				{
				{
				State = 170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__17:
					{
					State = 166;
					Match(T__17);
					 type = BinaryExpressionType.Plus;
					}
					break;
				case T__18:
					{
					State = 168;
					Match(T__18);
					 type = BinaryExpressionType.Minus;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 172;
				_localctx.right = multiplicativeExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public UnaryExpressionContext left;
		public UnaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_multiplicativeExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_localctx.left = unaryExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) {
				{
				{
				State = 188;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__19:
					{
					State = 182;
					Match(T__19);
					 type = BinaryExpressionType.Times;
					}
					break;
				case T__20:
					{
					State = 184;
					Match(T__20);
					 type = BinaryExpressionType.Div;
					}
					break;
				case T__21:
					{
					State = 186;
					Match(T__21);
					 type = BinaryExpressionType.Modulo;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 190;
				_localctx.right = unaryExpression();
				 _localctx.retValue =  new BinaryExpression(type, _localctx.retValue, _localctx.right.retValue);
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public ExponentialExpressionContext _exponentialExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ExponentialExpressionContext exponentialExpression() {
			return GetRuleContext<ExponentialExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(NCalcParser.NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_unaryExpression);
		int _la;
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
			case TRUE:
			case FALSE:
			case ID:
			case INTEGER:
			case FLOAT:
			case STRING:
			case DATETIME:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				_localctx._exponentialExpression = exponentialExpression();
				 _localctx.retValue =  _localctx._exponentialExpression.retValue;
				}
				break;
			case T__22:
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				_la = TokenStream.LA(1);
				if ( !(_la==T__22 || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 202;
				_localctx._exponentialExpression = exponentialExpression();
				 _localctx.retValue =  new UnaryExpression(UnaryExpressionType.Not, _localctx._exponentialExpression.retValue);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 205;
				Match(T__23);
				}
				State = 206;
				_localctx._exponentialExpression = exponentialExpression();
				 _localctx.retValue =  new UnaryExpression(UnaryExpressionType.BitwiseNot, _localctx._exponentialExpression.retValue);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 209;
				Match(T__18);
				State = 210;
				_localctx._exponentialExpression = exponentialExpression();
				 _localctx.retValue =  new UnaryExpression(UnaryExpressionType.Negate, _localctx._exponentialExpression.retValue);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 5);
				{
				State = 213;
				Match(T__17);
				State = 214;
				_localctx._exponentialExpression = exponentialExpression();
				 _localctx.retValue =  new UnaryExpression(UnaryExpressionType.Positive, _localctx._exponentialExpression.retValue);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentialExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public PrimaryExpressionContext left;
		public UnaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public ExponentialExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentialExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterExponentialExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitExponentialExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExponentialExpressionContext exponentialExpression() {
		ExponentialExpressionContext _localctx = new ExponentialExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_exponentialExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_localctx.left = primaryExpression();
			 _localctx.retValue =  _localctx.left.retValue;
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 221;
					Match(T__24);
					State = 222;
					_localctx.right = unaryExpression();
					 _localctx.retValue =  new BinaryExpression(BinaryExpressionType.Exponentiation, _localctx.retValue, _localctx.right.retValue);
					}
					}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public LogicalExpression retValue;
		public LogicalExpressionContext _logicalExpression;
		public ValueContext expr;
		public IdentifierContext _identifier;
		public ArgumentsContext _arguments;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_primaryExpression);
		int _la;
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				Match(T__25);
				State = 231;
				_localctx._logicalExpression = logicalExpression();
				State = 232;
				Match(T__26);
				 _localctx.retValue =  _localctx._logicalExpression.retValue;
				}
				break;
			case TRUE:
			case FALSE:
			case INTEGER:
			case FLOAT:
			case STRING:
			case DATETIME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				_localctx.expr = value();
				 _localctx.retValue =  _localctx.expr.retValue;
				}
				break;
			case ID:
			case NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				_localctx._identifier = identifier();
				_localctx.retValue =  (LogicalExpression) _localctx._identifier.retValue;
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25) {
					{
					State = 240;
					_localctx._arguments = arguments();
					_localctx.retValue =  new Function(_localctx._identifier.retValue, (_localctx._arguments.retValue).ToArray());
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueExpression retValue;
		public IToken _INTEGER;
		public IToken _FLOAT;
		public IToken _STRING;
		public IToken _DATETIME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(NCalcParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(NCalcParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NCalcParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(NCalcParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NCalcParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NCalcParser.FALSE, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_value);
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				_localctx._INTEGER = Match(INTEGER);
				 try { _localctx.retValue =  new ValueExpression(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); } catch(System.OverflowException) { _localctx.retValue =  new ValueExpression(long.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); }
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				_localctx._FLOAT = Match(FLOAT);
				 _localctx.retValue =  new ValueExpression(double.Parse((_localctx._FLOAT!=null?_localctx._FLOAT.Text:null), NumberStyles.Float, numberFormatInfo));
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251;
				_localctx._STRING = Match(STRING);
				 _localctx.retValue =  new ValueExpression(extractString((_localctx._STRING!=null?_localctx._STRING.Text:null)));
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 253;
				_localctx._DATETIME = Match(DATETIME);
				 _localctx.retValue =  new ValueExpression(DateTime.Parse((_localctx._DATETIME!=null?_localctx._DATETIME.Text:null).Substring(1, (_localctx._DATETIME!=null?_localctx._DATETIME.Text:null).Length-2)));
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 255;
				Match(TRUE);
				 _localctx.retValue =  new ValueExpression(true);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 257;
				Match(FALSE);
				 _localctx.retValue =  new ValueExpression(false);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Identifier retValue;
		public IToken _ID;
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NCalcParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NCalcParser.NAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_identifier);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				_localctx._ID = Match(ID);
				 _localctx.retValue =  new Identifier((_localctx._ID!=null?_localctx._ID.Text:null));
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				_localctx._NAME = Match(NAME);
				 _localctx.retValue =  new Identifier((_localctx._NAME!=null?_localctx._NAME.Text:null).Substring(1, (_localctx._NAME!=null?_localctx._NAME.Text:null).Length-2));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public List<LogicalExpression> retValue;
		public LogicalExpressionContext first;
		public LogicalExpressionContext follow;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext[] logicalExpression() {
			return GetRuleContexts<LogicalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression(int i) {
			return GetRuleContext<LogicalExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 34, RULE_expressionList);

		List<LogicalExpression> expressions = new List<LogicalExpression>();

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_localctx.first = logicalExpression();
			expressions.Add(_localctx.first.retValue);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__27) {
				{
				{
				State = 269;
				Match(T__27);
				State = 270;
				_localctx.follow = logicalExpression();
				expressions.Add(_localctx.follow.retValue);
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			 _localctx.retValue =  expressions;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public List<LogicalExpression> retValue;
		public ExpressionListContext _expressionList;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 36, RULE_arguments);

		_localctx.retValue =  new List<LogicalExpression>();

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(T__25);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1092625367040L) != 0)) {
				{
				State = 281;
				_localctx._expressionList = expressionList();
				_localctx.retValue =  _localctx._expressionList.retValue;
				}
			}

			State = 286;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,41,289,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,3,1,51,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,60,8,2,10,
		2,12,2,63,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,72,8,3,10,3,12,3,75,9,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,84,8,4,10,4,12,4,87,9,4,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,5,5,96,8,5,10,5,12,5,99,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		5,6,108,8,6,10,6,12,6,111,9,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,119,8,7,1,7,
		1,7,1,7,5,7,124,8,7,10,7,12,7,127,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,3,8,139,8,8,1,8,1,8,1,8,5,8,144,8,8,10,8,12,8,147,9,8,1,9,1,9,
		1,9,1,9,1,9,1,9,3,9,155,8,9,1,9,1,9,1,9,5,9,160,8,9,10,9,12,9,163,9,9,
		1,10,1,10,1,10,1,10,1,10,1,10,3,10,171,8,10,1,10,1,10,1,10,5,10,176,8,
		10,10,10,12,10,179,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,189,
		8,11,1,11,1,11,1,11,5,11,194,8,11,10,11,12,11,197,9,11,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,3,12,218,8,12,1,13,1,13,1,13,1,13,1,13,1,13,5,13,226,8,13,10,
		13,12,13,229,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,3,14,244,8,14,3,14,246,8,14,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,3,15,260,8,15,1,16,1,16,1,16,1,16,3,16,266,
		8,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,274,8,17,10,17,12,17,277,9,17,
		1,17,1,17,1,18,1,18,1,18,1,18,3,18,285,8,18,1,18,1,18,1,18,0,0,19,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,5,2,0,3,3,32,32,2,0,
		4,4,31,31,1,0,8,9,1,0,10,11,2,0,23,23,33,33,304,0,38,1,0,0,0,2,42,1,0,
		0,0,4,52,1,0,0,0,6,64,1,0,0,0,8,76,1,0,0,0,10,88,1,0,0,0,12,100,1,0,0,
		0,14,112,1,0,0,0,16,128,1,0,0,0,18,148,1,0,0,0,20,164,1,0,0,0,22,180,1,
		0,0,0,24,217,1,0,0,0,26,219,1,0,0,0,28,245,1,0,0,0,30,259,1,0,0,0,32,265,
		1,0,0,0,34,267,1,0,0,0,36,280,1,0,0,0,38,39,3,2,1,0,39,40,5,0,0,1,40,41,
		6,0,-1,0,41,1,1,0,0,0,42,43,3,4,2,0,43,50,6,1,-1,0,44,45,5,1,0,0,45,46,
		3,4,2,0,46,47,5,2,0,0,47,48,3,4,2,0,48,49,6,1,-1,0,49,51,1,0,0,0,50,44,
		1,0,0,0,50,51,1,0,0,0,51,3,1,0,0,0,52,53,3,6,3,0,53,61,6,2,-1,0,54,55,
		7,0,0,0,55,56,6,2,-1,0,56,57,3,4,2,0,57,58,6,2,-1,0,58,60,1,0,0,0,59,54,
		1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,5,1,0,0,0,63,61,1,
		0,0,0,64,65,3,8,4,0,65,73,6,3,-1,0,66,67,7,1,0,0,67,68,6,3,-1,0,68,69,
		3,8,4,0,69,70,6,3,-1,0,70,72,1,0,0,0,71,66,1,0,0,0,72,75,1,0,0,0,73,71,
		1,0,0,0,73,74,1,0,0,0,74,7,1,0,0,0,75,73,1,0,0,0,76,77,3,10,5,0,77,85,
		6,4,-1,0,78,79,5,5,0,0,79,80,6,4,-1,0,80,81,3,8,4,0,81,82,6,4,-1,0,82,
		84,1,0,0,0,83,78,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,
		9,1,0,0,0,87,85,1,0,0,0,88,89,3,12,6,0,89,97,6,5,-1,0,90,91,5,6,0,0,91,
		92,6,5,-1,0,92,93,3,12,6,0,93,94,6,5,-1,0,94,96,1,0,0,0,95,90,1,0,0,0,
		96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,11,1,0,0,0,99,97,1,0,0,0,
		100,101,3,14,7,0,101,109,6,6,-1,0,102,103,5,7,0,0,103,104,6,6,-1,0,104,
		105,3,14,7,0,105,106,6,6,-1,0,106,108,1,0,0,0,107,102,1,0,0,0,108,111,
		1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,13,1,0,0,0,111,109,1,0,0,0,
		112,113,3,16,8,0,113,125,6,7,-1,0,114,115,7,2,0,0,115,119,6,7,-1,0,116,
		117,7,3,0,0,117,119,6,7,-1,0,118,114,1,0,0,0,118,116,1,0,0,0,119,120,1,
		0,0,0,120,121,3,16,8,0,121,122,6,7,-1,0,122,124,1,0,0,0,123,118,1,0,0,
		0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,15,1,0,0,0,127,125,
		1,0,0,0,128,129,3,18,9,0,129,145,6,8,-1,0,130,131,5,12,0,0,131,139,6,8,
		-1,0,132,133,5,13,0,0,133,139,6,8,-1,0,134,135,5,14,0,0,135,139,6,8,-1,
		0,136,137,5,15,0,0,137,139,6,8,-1,0,138,130,1,0,0,0,138,132,1,0,0,0,138,
		134,1,0,0,0,138,136,1,0,0,0,139,140,1,0,0,0,140,141,3,18,9,0,141,142,6,
		8,-1,0,142,144,1,0,0,0,143,138,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,
		145,146,1,0,0,0,146,17,1,0,0,0,147,145,1,0,0,0,148,149,3,20,10,0,149,161,
		6,9,-1,0,150,151,5,16,0,0,151,155,6,9,-1,0,152,153,5,17,0,0,153,155,6,
		9,-1,0,154,150,1,0,0,0,154,152,1,0,0,0,155,156,1,0,0,0,156,157,3,20,10,
		0,157,158,6,9,-1,0,158,160,1,0,0,0,159,154,1,0,0,0,160,163,1,0,0,0,161,
		159,1,0,0,0,161,162,1,0,0,0,162,19,1,0,0,0,163,161,1,0,0,0,164,165,3,22,
		11,0,165,177,6,10,-1,0,166,167,5,18,0,0,167,171,6,10,-1,0,168,169,5,19,
		0,0,169,171,6,10,-1,0,170,166,1,0,0,0,170,168,1,0,0,0,171,172,1,0,0,0,
		172,173,3,22,11,0,173,174,6,10,-1,0,174,176,1,0,0,0,175,170,1,0,0,0,176,
		179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,21,1,0,0,0,179,177,1,0,
		0,0,180,181,3,24,12,0,181,195,6,11,-1,0,182,183,5,20,0,0,183,189,6,11,
		-1,0,184,185,5,21,0,0,185,189,6,11,-1,0,186,187,5,22,0,0,187,189,6,11,
		-1,0,188,182,1,0,0,0,188,184,1,0,0,0,188,186,1,0,0,0,189,190,1,0,0,0,190,
		191,3,24,12,0,191,192,6,11,-1,0,192,194,1,0,0,0,193,188,1,0,0,0,194,197,
		1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,23,1,0,0,0,197,195,1,0,0,0,
		198,199,3,26,13,0,199,200,6,12,-1,0,200,218,1,0,0,0,201,202,7,4,0,0,202,
		203,3,26,13,0,203,204,6,12,-1,0,204,218,1,0,0,0,205,206,5,24,0,0,206,207,
		3,26,13,0,207,208,6,12,-1,0,208,218,1,0,0,0,209,210,5,19,0,0,210,211,3,
		26,13,0,211,212,6,12,-1,0,212,218,1,0,0,0,213,214,5,18,0,0,214,215,3,26,
		13,0,215,216,6,12,-1,0,216,218,1,0,0,0,217,198,1,0,0,0,217,201,1,0,0,0,
		217,205,1,0,0,0,217,209,1,0,0,0,217,213,1,0,0,0,218,25,1,0,0,0,219,220,
		3,28,14,0,220,227,6,13,-1,0,221,222,5,25,0,0,222,223,3,24,12,0,223,224,
		6,13,-1,0,224,226,1,0,0,0,225,221,1,0,0,0,226,229,1,0,0,0,227,225,1,0,
		0,0,227,228,1,0,0,0,228,27,1,0,0,0,229,227,1,0,0,0,230,231,5,26,0,0,231,
		232,3,2,1,0,232,233,5,27,0,0,233,234,6,14,-1,0,234,246,1,0,0,0,235,236,
		3,30,15,0,236,237,6,14,-1,0,237,246,1,0,0,0,238,239,3,32,16,0,239,243,
		6,14,-1,0,240,241,3,36,18,0,241,242,6,14,-1,0,242,244,1,0,0,0,243,240,
		1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,230,1,0,0,0,245,235,1,0,0,
		0,245,238,1,0,0,0,246,29,1,0,0,0,247,248,5,35,0,0,248,260,6,15,-1,0,249,
		250,5,36,0,0,250,260,6,15,-1,0,251,252,5,37,0,0,252,260,6,15,-1,0,253,
		254,5,38,0,0,254,260,6,15,-1,0,255,256,5,29,0,0,256,260,6,15,-1,0,257,
		258,5,30,0,0,258,260,6,15,-1,0,259,247,1,0,0,0,259,249,1,0,0,0,259,251,
		1,0,0,0,259,253,1,0,0,0,259,255,1,0,0,0,259,257,1,0,0,0,260,31,1,0,0,0,
		261,262,5,34,0,0,262,266,6,16,-1,0,263,264,5,39,0,0,264,266,6,16,-1,0,
		265,261,1,0,0,0,265,263,1,0,0,0,266,33,1,0,0,0,267,268,3,2,1,0,268,275,
		6,17,-1,0,269,270,5,28,0,0,270,271,3,2,1,0,271,272,6,17,-1,0,272,274,1,
		0,0,0,273,269,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,
		276,278,1,0,0,0,277,275,1,0,0,0,278,279,6,17,-1,0,279,35,1,0,0,0,280,284,
		5,26,0,0,281,282,3,34,17,0,282,283,6,18,-1,0,283,285,1,0,0,0,284,281,1,
		0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,5,27,0,0,287,37,1,0,0,0,
		24,50,61,73,85,97,109,118,125,138,145,154,161,170,177,188,195,217,227,
		243,245,259,265,275,284
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
